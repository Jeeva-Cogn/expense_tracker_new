import 'package:hive_flutter/hive_flutter.dart';part 'budget_model.g.dart';@HiveType(typeId: 1)class Budget extends HiveObject {  @HiveField(0)  final String id;  @HiveField(1)  final String category;  @HiveField(2)  final double amount;  @HiveField(3)  final double spent;  @HiveField(4)  final DateTime startDate;  @HiveField(5)  final DateTime endDate;  @HiveField(6)  final bool isActive;  Budget({    required this.id,    required this.category,    required this.amount,    this.spent = 0.0,    required this.startDate,    required this.endDate,    this.isActive = true,  });  Budget copyWith({    String? id,    String? category,    double? amount,    double? spent,    DateTime? startDate,    DateTime? endDate,    bool? isActive,  }) {    return Budget(      id: id ?? this.id,      category: category ?? this.category,      amount: amount ?? this.amount,      spent: spent ?? this.spent,      startDate: startDate ?? this.startDate,      endDate: endDate ?? this.endDate,      isActive: isActive ?? this.isActive,    );  }  double get remainingAmount => amount - spent;  double get utilization => amount > 0 ? spent / amount : 0.0;  bool get isOverBudget => spent > amount;  bool get isNearLimit => utilization >= 0.8;  Map<String, dynamic> toJson() {    return {      'id': id,      'category': category,      'amount': amount,      'spent': spent,      'startDate': startDate.toIso8601String(),      'endDate': endDate.toIso8601String(),      'isActive': isActive,    };  }  factory Budget.fromJson(Map<String, dynamic> json) {    return Budget(      id: json['id'] as String,      category: json['category'] as String,      amount: (json['amount'] as num).toDouble(),      spent: (json['spent'] as num?)?.toDouble() ?? 0.0,      startDate: DateTime.parse(json['startDate'] as String),      endDate: DateTime.parse(json['endDate'] as String),      isActive: json['isActive'] as bool? ?? true,    );  }  @override  String toString() {    return 'Budget(id: $id, category: $category, amount: $amount, spent: $spent)';  }}class BudgetDashboardData {  final double totalBudget;  final double totalSpent;  final List<Budget> budgets;  final List<String> insights;  final List<String> alerts;  final Map<String, double> categorySpending;  BudgetDashboardData({    required this.totalBudget,    required this.totalSpent,    required this.budgets,    required this.insights,    required this.alerts,    required this.categorySpending,  });  double get remainingBudget => totalBudget - totalSpent;  double get utilization => totalBudget > 0 ? totalSpent / totalBudget : 0.0;}